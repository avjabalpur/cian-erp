import { parseAsString, parseAsInteger, parseAsBoolean, parseAsFloat } from 'nuqs/server';
import { ItemMasterFilter } from '@/types/item-master';
import { ItemMasterFormData } from "@/validations/item-master";

export interface SelectOption {
  value: string;
  label: string;
  variant?: "default" | "secondary" | "destructive" | "outline";
  disabled?: boolean;
  shortName?: string;
}

// Status Options
export const statusOptions: SelectOption[] = [
  { label: "All Statuses", value: "" },
  { label: "Active", value: "true" },
  { label: "Inactive", value: "false" },
];

// Sort Options
export const sortOptions: SelectOption[] = [
  { value: "created_at", label: "Created Date" },
  { value: "updated_at", label: "Updated Date" },
  { value: "code", label: "Code" },
  { value: "name", label: "Name" },
  { value: "description", label: "Description" },
];

// Sort Order Options
export const sortOrderOptions: SelectOption[] = [
  { value: "desc", label: "Descending" },
  { value: "asc", label: "Ascending" }
];

// Page Size Options
export const pageSizeOptions: SelectOption[] = [
  { label: "10 per page", value: "10" },
  { label: "25 per page", value: "25" },
  { label: "50 per page", value: "50" },
  { label: "100 per page", value: "100" },
];

// nuqs Parsers
export const itemTypeParsers = {
  page: parseAsInteger.withDefault(1),
  pageSize: parseAsInteger.withDefault(10),
  sortBy: parseAsString.withDefault("created_at"),
  sortOrder: parseAsString.withDefault("desc") as any,
  search: parseAsString.withDefault(""),
  isActive: parseAsBoolean,
};

// Filter Default Values
export const defaultItemTypeFilter = {
  page: 1,
  pageSize: 10,
  sortBy: "created_at",
  sortOrder: "desc" as "asc" | "desc",
  search: "",
  isActive: undefined as boolean | undefined,
};

export const itemMasterFilterParsers = {
  search: parseAsString.withDefault(''),
  itemCode: parseAsString.withDefault(''),
  itemName: parseAsString.withDefault(''),
  shortName: parseAsString.withDefault(''),
  revNo: parseAsString.withDefault(''),
  itemTypeId: parseAsInteger.withDefault(0),
  subType: parseAsString.withDefault(''),
  gsInd: parseAsString.withDefault(''),
  goodsType: parseAsString.withDefault(''),
  pharmacopoeiaName: parseAsString.withDefault(''),
  unitOfMeasure: parseAsString.withDefault(''),
  issuingUnit: parseAsString.withDefault(''),
  hsn: parseAsString.withDefault(''),
  uqc: parseAsString.withDefault(''),
  drawingRef: parseAsString.withDefault(''),
  stdAssayStrength: parseAsString.withDefault(''),
  productType: parseAsString.withDefault(''),
  salesDivision: parseAsString.withDefault(''),
  productGroup: parseAsString.withDefault(''),
  vendorPartNo: parseAsString.withDefault(''),
  allergen: parseAsBoolean.withDefault(false),
  activeIngredient: parseAsString.withDefault(''),
  packingFreightInsuranceServices: parseAsString.withDefault(''),
  boughtOut: parseAsBoolean.withDefault(false),
  jobWork: parseAsBoolean.withDefault(false),
  imported: parseAsBoolean.withDefault(false),
  taxCreditApplicable: parseAsBoolean.withDefault(false),
  manufactured: parseAsBoolean.withDefault(false),
  sold: parseAsBoolean.withDefault(false),
  keyProduct: parseAsBoolean.withDefault(false),
  exported: parseAsBoolean.withDefault(false),
  batchNotApplicable: parseAsBoolean.withDefault(false),
  qcRequired: parseAsBoolean.withDefault(false),
  mfgDateApplicable: parseAsBoolean.withDefault(false),
  expiryDateApplicable: parseAsBoolean.withDefault(false),
  trackSerialNos: parseAsBoolean.withDefault(false),
  mfgLocNameRequired: parseAsBoolean.withDefault(false),
  mfgMmYyyyApplicable: parseAsBoolean.withDefault(false),
  expiryMmYyyyApplicable: parseAsBoolean.withDefault(false),
  principalForStatutoryReporting: parseAsBoolean.withDefault(false),
  minUomIssConvFactor: parseAsFloat.withDefault(0),
  maxUomIssConvFactor: parseAsFloat.withDefault(0),
  minUomUqcConvFactor: parseAsFloat.withDefault(0),
  maxUomUqcConvFactor: parseAsFloat.withDefault(0),
  minShelfLifeMonths: parseAsInteger.withDefault(0),
  maxShelfLifeMonths: parseAsInteger.withDefault(0),
  minShelfLifeDays: parseAsInteger.withDefault(0),
  maxShelfLifeDays: parseAsInteger.withDefault(0),
  minStdRate: parseAsFloat.withDefault(0),
  maxStdRate: parseAsFloat.withDefault(0),
  minLeadTimeDays: parseAsInteger.withDefault(0),
  maxLeadTimeDays: parseAsInteger.withDefault(0),
  minStdLossOnDry: parseAsFloat.withDefault(0),
  maxStdLossOnDry: parseAsFloat.withDefault(0),
  minSafetyStock: parseAsFloat.withDefault(0),
  maxSafetyStock: parseAsFloat.withDefault(0),
  minEconomicOrderQty: parseAsFloat.withDefault(0),
  maxEconomicOrderQty: parseAsFloat.withDefault(0),
  minDesiredPackSize: parseAsFloat.withDefault(0),
  maxDesiredPackSize: parseAsFloat.withDefault(0),
  minAllowedAllergenPercent: parseAsFloat.withDefault(0),
  maxAllowedAllergenPercent: parseAsFloat.withDefault(0),
  minStdMfgFeesPerUnit: parseAsFloat.withDefault(0),
  maxStdMfgFeesPerUnit: parseAsFloat.withDefault(0),
  minConversionFactor: parseAsFloat.withDefault(0),
  maxConversionFactor: parseAsFloat.withDefault(0),
  createdFrom: parseAsString.withDefault(''),
  createdTo: parseAsString.withDefault(''),
  updatedFrom: parseAsString.withDefault(''),
  updatedTo: parseAsString.withDefault(''),
  sortBy: parseAsString.withDefault('itemName'),
  sortDescending: parseAsBoolean.withDefault(false),
  pageNumber: parseAsInteger.withDefault(1),
  pageSize: parseAsInteger.withDefault(20),
  currentBuyer: parseAsString.withDefault(''),
  mainProdCentre: parseAsString.withDefault(''),
  freightOn: parseAsString.withDefault(''),
};

export const getItemMasterDefaultValues = (): ItemMasterFormData => ({
  itemCode: "",
  revNo: "",
  itemTypeId: "",
  subType: "",
  gsInd: "",
  goodsType: "",
  itemName: "",
  shortName: "",
  pharmacopoeiaName: "",
  unitOfMeasure: "",
  issuingUnit: "",
  hsn: "",
  uqc: "",
  uomIssConvFactor: "",
  uomUqcConvFactor: "",
  drawingRef: "",
  leadTimeDays: "",
  currentBuyer: "",
  economicOrderQty: "",
  desiredPackSize: "",
  freightOn: "",
  stdAssayStrength: "",
  shelfLifeMonths: "",
  shelfLifeDays: "",
  stdRate: "",
  stdLossOnDry: "",
  safetyStock: "",
  allowedAllergenPercent: "",
  stdMfgFeesPerUnit: "",
  mainProdCentre: "",
  sold: false,
  keyProduct: false,
  exported: false,
  productType: "",
  salesDivision: "",
  productGroup: "",
  conversionFactor: "",
  vendorPartNo: "",
  boughtOut: false,
  jobWork: false,
  imported: false,
  taxCreditApplicable: false,
  manufactured: false,
  batchNotApplicable: false,
  qcRequired: false,
  allergen: false,
  mfgDateApplicable: false,
  expiryDateApplicable: false,
  trackSerialNos: false,
  packingFreightInsuranceServices: "",
  activeIngredient: "",
  mfgLocNameRequired: false,
  mfgMmYyyyApplicable: false,
  expiryMmYyyyApplicable: false,
  principalForStatutoryReporting: false,
  // Sales Details
  sellingPrice: "",
  currencyId: "",
  isTaxInclusive: false,
  discountPercentage: "",
  minimumOrderQuantity: "",
  notes: "",
  // Bought Out Details
  purchaseBasedOn: "",
  excessPlanningPercent: "",
  reorderLevel: "",
  minStockLevel: "",
  maxStockLevel: "",
  minBalanceShelfLifeDays: "",
  customDutyPercent: "",
  igstPercent: "",
  swsPercent: "",
  maxPurchaseRate: "",
  stopProcurement: false,
  // Stock Analysis
  abcConsumptionValue: "",
  xyzStockValue: "",
  fsnMovement: "",
  vedAnalysis: "",
  minimumStockLevel: "",
  maximumStockLevel: "",
  economicOrderQuantity: "",
  averageUsagePerDay: "",
  lastStockCheckDate: "",
  lastStockQuantity: "",
  nextStockCheckDate: "",
  // Export Details
  itemDescriptionForExports: "",
  exportProductGroupCode: "",
  exportProductGroupName: "",
  depbRateListSrlNo: "",
  depbRate: "",
  depbValueCap: "",
  depbRemarks: "",
  dutyDrawbackSrlNo: "",
  dutyDrawbackRateType: "",
  dutyDrawbackRatePercent: "",
  dutyDrawbackRateFixed: "",
  dutyDrawbackValueCap: "",
  dutyDrawbackRemarks: "",
  // Specifications
  itemSpecification: "",
  substituteItemFor: "",
  customTariffNo: "",
  exciseTariffNo: "",
  vatCommCode: "",
  convFactor: "",
  oldCode: "",
  standardWeight: "",
  standardConversionCostFactor: "",
  standardPackingCostFactor: "",
  costFactorPercent: "",
  packingCostRs: "",
  // Other Details
  packShort: "",
  productCast: "",
  pvcColor: "",
  color: "",
  flavour: "",
  fragrance: "",
  form: "",
  packagingStyle: "",
  changePart: "",
  size: "",
  withLeaflet: false,
  withApplicator: false,
  withWad: false,
  withSilica: false,
  withCotton: false,
  withMeasuringCap: false,
  withSpoon: false,
  packingNp: "",
  packingNpQty: "",
  packingStylePtd: "",
  packingStylePtdQty: "",
  notePerStrip: "",
  packShortPtdSpec: "",
  packShortPtdSize: "",
  packShortPtdQty: "",
  packingStyleNpSize: "",
  packingStyleNpQty: "",
  noteForCtn: "",
  outerSize: "",
  outerQty: "",
  shrink: "",
  shrinkPacking: "",
  shipperSize: "",
  qtyPerShipper: "",
  shipperNote: "",
});

export const mapItemToFormData = (item: any): ItemMasterFormData => {
  if (!item) return getItemMasterDefaultValues();

  return {
    itemCode: item.itemCode || "",
    revNo: item.revNo || "",
    itemTypeId: item.itemTypeId ? item.itemTypeId.toString() : "",
    subType: item.subType || "",
    gsInd: item.gsInd || "",
    goodsType: item.goodsType || "",
    itemName: item.itemName || "",
    shortName: item.shortName || "",
    pharmacopoeiaName: item.pharmacopoeiaName || "",
    unitOfMeasure: item.unitOfMeasure || "",
    issuingUnit: item.issuingUnit || "",
    hsn: item.hsn || "",
    uqc: item.uqc || "",
    uomIssConvFactor: item.uomIssConvFactor ? item.uomIssConvFactor.toString() : "",
    uomUqcConvFactor: item.uomUqcConvFactor ? item.uomUqcConvFactor.toString() : "",
    drawingRef: item.drawingRef || "",
    leadTimeDays: item.leadTimeDays ? item.leadTimeDays.toString() : "",
    currentBuyer: item.currentBuyer || "",
    economicOrderQty: item.economicOrderQty ? item.economicOrderQty.toString() : "",
    desiredPackSize: item.desiredPackSize ? item.desiredPackSize.toString() : "",
    freightOn: item.freightOn || "",
    stdAssayStrength: item.stdAssayStrength || "",
    shelfLifeMonths: item.shelfLifeMonths ? item.shelfLifeMonths.toString() : "",
    shelfLifeDays: item.shelfLifeDays ? item.shelfLifeDays.toString() : "",
    stdRate: item.stdRate ? item.stdRate.toString() : "",
    stdLossOnDry: item.stdLossOnDry ? item.stdLossOnDry.toString() : "",
    safetyStock: item.safetyStock ? item.safetyStock.toString() : "",
    allowedAllergenPercent: item.allowedAllergenPercent ? item.allowedAllergenPercent.toString() : "",
    stdMfgFeesPerUnit: item.stdMfgFeesPerUnit ? item.stdMfgFeesPerUnit.toString() : "",
    mainProdCentre: item.mainProdCentre || "",
    sold: item.sold || false,
    keyProduct: item.keyProduct || false,
    exported: item.exported || false,
    productType: item.productType || "",
    salesDivision: item.salesDivision || "",
    productGroup: item.productGroup || "",
    conversionFactor: item.conversionFactor ? item.conversionFactor.toString() : "",
    vendorPartNo: item.vendorPartNo || "",
    boughtOut: item.boughtOut || false,
    jobWork: item.jobWork || false,
    imported: item.imported || false,
    taxCreditApplicable: item.taxCreditApplicable || false,
    manufactured: item.manufactured || false,
    batchNotApplicable: item.batchNotApplicable || false,
    qcRequired: item.qcRequired || false,
    allergen: item.allergen || false,
    mfgDateApplicable: item.mfgDateApplicable || false,
    expiryDateApplicable: item.expiryDateApplicable || false,
    trackSerialNos: item.trackSerialNos || false,
    packingFreightInsuranceServices: item.packingFreightInsuranceServices || "",
    activeIngredient: item.activeIngredient || "",
    mfgLocNameRequired: item.mfgLocNameRequired || false,
    mfgMmYyyyApplicable: item.mfgMmYyyyApplicable || false,
    expiryMmYyyyApplicable: item.expiryMmYyyyApplicable || false,
    principalForStatutoryReporting: item.principalForStatutoryReporting || false,
    // Map sales details data
    sellingPrice: item.salesDetail?.sellingPrice ? item.salesDetail.sellingPrice.toString() : "",
    currencyId: item.salesDetail?.currencyId ? item.salesDetail.currencyId.toString() : "",
    isTaxInclusive: item.salesDetail?.isTaxInclusive || false,
    discountPercentage: item.salesDetail?.discountPercentage ? item.salesDetail.discountPercentage.toString() : "",
    minimumOrderQuantity: item.salesDetail?.minimumOrderQuantity ? item.salesDetail.minimumOrderQuantity.toString() : "",
    notes: item.salesDetail?.notes || "",
    // Map specification data
    itemSpecification: item.specification?.specification || "",
    substituteItemFor: item.specification?.substituteItemFor || "",
    customTariffNo: item.specification?.customTariffNo || "",
    exciseTariffNo: item.specification?.exciseTariffNo || "",
    vatCommCode: item.specification?.vatCommCode || "",
    convFactor: item.specification?.convFactor ? item.specification.convFactor.toString() : "",
    oldCode: item.specification?.oldCode || "",
    standardWeight: item.specification?.standardWeight ? item.specification.standardWeight.toString() : "",
    standardConversionCostFactor: item.specification?.standardConversionCostFactor ? item.specification.standardConversionCostFactor.toString() : "",
    standardPackingCostFactor: item.specification?.standardPackingCostFactor ? item.specification.standardPackingCostFactor.toString() : "",
    costFactorPercent: item.specification?.costFactorPercent ? item.specification.costFactorPercent.toString() : "",
    packingCostRs: item.specification?.packingCostRs ? item.specification.packingCostRs.toString() : "",
    // Map bought out details data
    purchaseBasedOn: item.boughtOutDetails?.purchaseBasedOn || "",
    excessPlanningPercent: item.boughtOutDetails?.excessPlanningPercent ? item.boughtOutDetails.excessPlanningPercent.toString() : "",
    reorderLevel: item.boughtOutDetails?.reorderLevel ? item.boughtOutDetails.reorderLevel.toString() : "",
    minStockLevel: item.boughtOutDetails?.minStockLevel ? item.boughtOutDetails.minStockLevel.toString() : "",
    maxStockLevel: item.boughtOutDetails?.maxStockLevel ? item.boughtOutDetails.maxStockLevel.toString() : "",
    minBalanceShelfLifeDays: item.boughtOutDetails?.minBalanceShelfLifeDays ? item.boughtOutDetails.minBalanceShelfLifeDays.toString() : "",
    customDutyPercent: item.boughtOutDetails?.customDutyPercent ? item.boughtOutDetails.customDutyPercent.toString() : "",
    igstPercent: item.boughtOutDetails?.igstPercent ? item.boughtOutDetails.igstPercent.toString() : "",
    swsPercent: item.boughtOutDetails?.swsPercent ? item.boughtOutDetails.swsPercent.toString() : "",
    maxPurchaseRate: item.boughtOutDetails?.maxPurchaseRate ? item.boughtOutDetails.maxPurchaseRate.toString() : "",
    stopProcurement: item.boughtOutDetails?.stopProcurement || false,
    // Map stock analysis data
    abcConsumptionValue: item.stockAnalysis?.abcConsumptionValue || "",
    xyzStockValue: item.stockAnalysis?.xyzStockValue || "",
    fsnMovement: item.stockAnalysis?.fsnMovement || "",
    vedAnalysis: item.stockAnalysis?.vedAnalysis || "",
    minimumStockLevel: item.stockAnalysis?.minimumStockLevel ? item.stockAnalysis.minimumStockLevel.toString() : "",
    maximumStockLevel: item.stockAnalysis?.maximumStockLevel ? item.stockAnalysis.maximumStockLevel.toString() : "",
    economicOrderQuantity: item.stockAnalysis?.economicOrderQuantity ? item.stockAnalysis.economicOrderQuantity.toString() : "",
    averageUsagePerDay: item.stockAnalysis?.averageUsagePerDay ? item.stockAnalysis.averageUsagePerDay.toString() : "",
    lastStockCheckDate: item.stockAnalysis?.lastStockCheckDate || "",
    lastStockQuantity: item.stockAnalysis?.lastStockQuantity ? item.stockAnalysis.lastStockQuantity.toString() : "",
    nextStockCheckDate: item.stockAnalysis?.nextStockCheckDate || "",
    // Map export details data
    itemDescriptionForExports: item.exportDetails?.itemDescriptionForExports || "",
    exportProductGroupCode: item.exportDetails?.exportProductGroupCode || "",
    exportProductGroupName: item.exportDetails?.exportProductGroupName || "",
    depbRateListSrlNo: item.exportDetails?.depbRateListSrlNo || "",
    depbRate: item.exportDetails?.depbRate ? item.exportDetails.depbRate.toString() : "",
    depbValueCap: item.exportDetails?.depbValueCap ? item.exportDetails.depbValueCap.toString() : "",
    depbRemarks: item.exportDetails?.depbRemarks || "",
    dutyDrawbackSrlNo: item.exportDetails?.dutyDrawbackSrlNo || "",
    dutyDrawbackRateType: item.exportDetails?.dutyDrawbackRateType || "",
    dutyDrawbackRatePercent: item.exportDetails?.dutyDrawbackRatePercent ? item.exportDetails.dutyDrawbackRatePercent.toString() : "",
    dutyDrawbackRateFixed: item.exportDetails?.dutyDrawbackRateFixed ? item.exportDetails.dutyDrawbackRateFixed.toString() : "",
    dutyDrawbackValueCap: item.exportDetails?.dutyDrawbackValueCap ? item.exportDetails.dutyDrawbackValueCap.toString() : "",
    dutyDrawbackRemarks: item.exportDetails?.dutyDrawbackRemarks || "",
    // Map other details data
    packShort: item.otherDetails?.packShort || "",
    productCast: item.otherDetails?.productCast || "",
    pvcColor: item.otherDetails?.pvcColor || "",
    color: item.otherDetails?.color || "",
    flavour: item.otherDetails?.flavour || "",
    fragrance: item.otherDetails?.fragrance || "",
    form: item.otherDetails?.form || "",
    packagingStyle: item.otherDetails?.packagingStyle || "",
    changePart: item.otherDetails?.changePart || "",
    size: item.otherDetails?.size || "",
    withLeaflet: item.otherDetails?.withLeaflet || false,
    withApplicator: item.otherDetails?.withApplicator || false,
    withWad: item.otherDetails?.withWad || false,
    withSilica: item.otherDetails?.withSilica || false,
    withCotton: item.otherDetails?.withCotton || false,
    withMeasuringCap: item.otherDetails?.withMeasuringCap || false,
    withSpoon: item.otherDetails?.withSpoon || false,
    packingNp: item.otherDetails?.packingNp || "",
    packingNpQty: item.otherDetails?.packingNpQty ? item.otherDetails.packingNpQty.toString() : "",
    packingStylePtd: item.otherDetails?.packingStylePtd || "",
    packingStylePtdQty: item.otherDetails?.packingStylePtdQty ? item.otherDetails.packingStylePtdQty.toString() : "",
    notePerStrip: item.otherDetails?.notePerStrip || "",
    packShortPtdSpec: item.otherDetails?.packShortPtdSpec || "",
    packShortPtdSize: item.otherDetails?.packShortPtdSize || "",
    packShortPtdQty: item.otherDetails?.packShortPtdQty ? item.otherDetails.packShortPtdQty.toString() : "",
    packingStyleNpSize: item.otherDetails?.packingStyleNpSize || "",
    packingStyleNpQty: item.otherDetails?.packingStyleNpQty ? item.otherDetails.packingStyleNpQty.toString() : "",
    noteForCtn: item.otherDetails?.noteForCtn || "",
    outerSize: item.otherDetails?.outerSize || "",
    outerQty: item.otherDetails?.outerQty ? item.otherDetails.outerQty.toString() : "",
    shrink: item.otherDetails?.shrink || "",
    shrinkPacking: item.otherDetails?.shrinkPacking || "",
    shipperSize: item.otherDetails?.shipperSize || "",
    qtyPerShipper: item.otherDetails?.qtyPerShipper ? item.otherDetails.qtyPerShipper.toString() : "",
    shipperNote: item.otherDetails?.shipperNote || "",
  };
};

export const transformFormDataToApi = (data: ItemMasterFormData) => {
  // Remove nested form fields from the main item data
  const {
    itemCode,
    itemSpecification,
    substituteItemFor,
    customTariffNo,
    exciseTariffNo,
    vatCommCode,
    convFactor,
    oldCode,
    standardWeight,
    standardConversionCostFactor,
    standardPackingCostFactor,
    costFactorPercent,
    packingCostRs,
    purchaseBasedOn,
    excessPlanningPercent,
    reorderLevel,
    minStockLevel,
    maxStockLevel,
    minBalanceShelfLifeDays,
    customDutyPercent,
    igstPercent,
    swsPercent,
    maxPurchaseRate,
    stopProcurement,
    abcConsumptionValue,
    xyzStockValue,
    fsnMovement,
    vedAnalysis,
    itemDescriptionForExports,
    exportProductGroupCode,
    exportProductGroupName,
    depbRateListSrlNo,
    depbRate,
    depbValueCap,
    depbRemarks,
    dutyDrawbackSrlNo,
    dutyDrawbackRateType,
    dutyDrawbackRatePercent,
    dutyDrawbackRateFixed,
    dutyDrawbackValueCap,
    dutyDrawbackRemarks,
    sellingPrice,
    currencyId,
    isTaxInclusive,
    discountPercentage,
    minimumOrderQuantity,
    notes,
    minimumStockLevel,
    maximumStockLevel,
    economicOrderQuantity,
    averageUsagePerDay,
    lastStockCheckDate,
    lastStockQuantity,
    nextStockCheckDate,
    packShort,
    productCast,
    pvcColor,
    color,
    flavour,
    fragrance,
    form,
    packagingStyle,
    changePart,
    size,
    withLeaflet,
    withApplicator,
    withWad,
    withSilica,
    withCotton,
    withMeasuringCap,
    withSpoon,
    packingNp,
    packingNpQty,
    packingStylePtd,
    packingStylePtdQty,
    notePerStrip,
    packShortPtdSpec,
    packShortPtdSize,
    packShortPtdQty,
    packingStyleNpSize,
    packingStyleNpQty,
    noteForCtn,
    outerSize,
    outerQty,
    shrink,
    shrinkPacking,
    shipperSize,
    qtyPerShipper,
    shipperNote,
    ...itemData
  } = data;

  return {
    ...itemData,
    // Include sales details data if any fields are filled
    salesDetail: (sellingPrice || currencyId || isTaxInclusive !== undefined || discountPercentage || minimumOrderQuantity || notes) ? {
      sellingPrice: sellingPrice ? parseFloat(sellingPrice) : undefined,
      currencyId: currencyId ? parseInt(currencyId) : undefined,
      isTaxInclusive: isTaxInclusive || false,
      discountPercentage: discountPercentage ? parseFloat(discountPercentage) : undefined,
      minimumOrderQuantity: minimumOrderQuantity ? parseFloat(minimumOrderQuantity) : undefined,
      isActive: true,
      notes,
    } : undefined,
    // Include specification data if any fields are filled
    specification: (itemSpecification || substituteItemFor || customTariffNo || exciseTariffNo || vatCommCode || convFactor || oldCode || standardWeight || standardConversionCostFactor || standardPackingCostFactor || costFactorPercent || packingCostRs) ? {
      specification: itemSpecification,
      SubstituteForItemCode:substituteItemFor,
      customTariffNo,
      exciseTariffNo,
      vatCommCode,
      convFactor: convFactor ? parseFloat(convFactor) : undefined,
      oldCode,
      standardWeight: standardWeight ? parseFloat(standardWeight) : undefined,
      standardConversionCostFactor: standardConversionCostFactor ? parseFloat(standardConversionCostFactor) : undefined,
      standardPackingCostFactor: standardPackingCostFactor ? parseFloat(standardPackingCostFactor) : undefined,
      costFactorPercent: costFactorPercent ? parseFloat(costFactorPercent) : undefined,
      packingCostRs: packingCostRs ? parseFloat(packingCostRs) : undefined,
    } : undefined,
    // Include bought out details data if any fields are filled
    boughtOutDetails: (purchaseBasedOn || excessPlanningPercent || reorderLevel || minStockLevel || maxStockLevel || minBalanceShelfLifeDays || customDutyPercent || igstPercent || swsPercent || maxPurchaseRate || stopProcurement) ? {
      purchaseBasedOn,
      excessPlanningPercent: excessPlanningPercent ? parseFloat(excessPlanningPercent) : undefined,
      reorderLevel: reorderLevel ? parseFloat(reorderLevel) : undefined,
      minStockLevel: minStockLevel ? parseFloat(minStockLevel) : undefined,
      maxStockLevel: maxStockLevel ? parseFloat(maxStockLevel) : undefined,
      minBalanceShelfLifeDays: minBalanceShelfLifeDays ? parseFloat(minBalanceShelfLifeDays) : undefined,
      customDutyPercent: customDutyPercent ? parseFloat(customDutyPercent) : undefined,
      igstPercent: igstPercent ? parseFloat(igstPercent) : undefined,
      swsPercent: swsPercent ? parseFloat(swsPercent) : undefined,
      maxPurchaseRate: maxPurchaseRate ? parseFloat(maxPurchaseRate) : undefined,
      stopProcurement,
    } : undefined,
    // Include stock analysis data if any fields are filled
    stockAnalysis: (abcConsumptionValue || xyzStockValue || fsnMovement || vedAnalysis || minimumStockLevel || maximumStockLevel || economicOrderQuantity || averageUsagePerDay || lastStockCheckDate || lastStockQuantity || nextStockCheckDate) ? {
      abcConsumptionValue,
      xyzStockValue,
      fsnMovement,
      vedAnalysis,
      minimumStockLevel: minimumStockLevel ? parseFloat(minimumStockLevel) : undefined,
      maximumStockLevel: maximumStockLevel ? parseFloat(maximumStockLevel) : undefined,
      economicOrderQuantity: economicOrderQuantity ? parseFloat(economicOrderQuantity) : undefined,
      averageUsagePerDay: averageUsagePerDay ? parseFloat(averageUsagePerDay) : undefined,
      lastStockCheckDate,
      lastStockQuantity: lastStockQuantity ? parseFloat(lastStockQuantity) : undefined,
      nextStockCheckDate,
      isActive: true,
      notes,
    } : undefined,
    // Include export details data if any fields are filled
    exportDetails: (itemDescriptionForExports || exportProductGroupCode || exportProductGroupName || depbRateListSrlNo || depbRate || depbValueCap || depbRemarks || dutyDrawbackSrlNo || dutyDrawbackRateType || dutyDrawbackRatePercent || dutyDrawbackRateFixed || dutyDrawbackValueCap || dutyDrawbackRemarks) ? {
      itemDescriptionForExports,
      exportProductGroupCode,
      exportProductGroupName,
      depbRateListSrlNo,
      depbRate: depbRate ? parseFloat(depbRate) : undefined,
      depbValueCap: depbValueCap ? parseFloat(depbValueCap) : undefined,
      depbRemarks,
      dutyDrawbackSrlNo,
      dutyDrawbackRateType,
      dutyDrawbackRatePercent: dutyDrawbackRatePercent ? parseFloat(dutyDrawbackRatePercent) : undefined,
      dutyDrawbackRateFixed: dutyDrawbackRateFixed ? parseFloat(dutyDrawbackRateFixed) : undefined,
      dutyDrawbackValueCap: dutyDrawbackValueCap ? parseFloat(dutyDrawbackValueCap) : undefined,
      dutyDrawbackRemarks,
    } : undefined,
    // Include other details data if any fields are filled
    otherDetails: (packShort || productCast || pvcColor || color || flavour || fragrance || form || packagingStyle || changePart || size || withLeaflet || withApplicator || withWad || withSilica || withCotton || withMeasuringCap || withSpoon || packingNp || packingNpQty || packingStylePtd || packingStylePtdQty || notePerStrip || packShortPtdSpec || packShortPtdSize || packShortPtdQty || packingStyleNpSize || packingStyleNpQty || noteForCtn || outerSize || outerQty || shrink || shrinkPacking || shipperSize || qtyPerShipper || shipperNote) ? {
      packShort,
      productCast,
      pvcColor,
      color,
      flavour,
      fragrance,
      form,
      packagingStyle,
      changePart,
      size,
      withLeaflet: withLeaflet || false,
      withApplicator: withApplicator || false,
      withWad: withWad || false,
      withSilica: withSilica || false,
      withCotton: withCotton || false,
      withMeasuringCap: withMeasuringCap || false,
      withSpoon: withSpoon || false,
      packingNp,
      packingNpQty: packingNpQty ? parseInt(packingNpQty) : undefined,
      packingStylePtd,
      packingStylePtdQty: packingStylePtdQty ? parseInt(packingStylePtdQty) : undefined,
      notePerStrip,
      packShortPtdSpec,
      packShortPtdSize,
      packShortPtdQty: packShortPtdQty ? parseInt(packShortPtdQty) : undefined,
      packingStyleNpSize,
      packingStyleNpQty: packingStyleNpQty ? parseInt(packingStyleNpQty) : undefined,
      noteForCtn,
      outerSize,
      outerQty: outerQty ? parseInt(outerQty) : undefined,
      shrink,
      shrinkPacking,
      shipperSize,
      qtyPerShipper: qtyPerShipper ? parseInt(qtyPerShipper) : undefined,
      shipperNote,
    } : undefined,
  };
};

export const clearItemMasterFilters = () => {
  return {
    search: '',
    itemCode: '',
    itemName: '',
    shortName: '',
    revNo: '',
    itemTypeId: null,
    subType: '',
    gsInd: '',
    goodsType: '',
    pharmacopoeiaName: '',
    unitOfMeasure: '',
    issuingUnit: '',
    drawingRef: '',
    stdAssayStrength: null,
    productType: '',
    salesDivision: '',
    productGroup: '',
    vendorPartNo: '',
    allergen: '',
    activeIngredient: '',
    packingFreightInsuranceServices: '',
    boughtOut: null,
    jobWork: null,
    imported: null,
    taxCreditApplicable: null,
    manufactured: null,
    sold: null,
    keyProduct: null,
    exported: null,
    batchNotApplicable: null,
    qcRequired: null,
    mfgDateApplicable: null,
    expiryDateApplicable: null,
    trackSerialNos: null,
    mfgLocNameRequired: null,
    mfgMmYyyyApplicable: null,
    expiryMmYyyyApplicable: null,
    principalForStatutoryReporting: null,
    minUomIssConvFactor: null,
    maxUomIssConvFactor: null,
    minUomUqcConvFactor: null,
    maxUomUqcConvFactor: null,
    minShelfLifeMonths: null,
    maxShelfLifeMonths: null,
    minShelfLifeDays: null,
    maxShelfLifeDays: null,
    minStdRate: null,
    maxStdRate: null,
    minLeadTimeDays: null,
    maxLeadTimeDays: null,
    minStdLossOnDry: null,
    maxStdLossOnDry: null,
    minSafetyStock: null,
    maxSafetyStock: null,
    minEconomicOrderQty: null,
    maxEconomicOrderQty: null,
    minDesiredPackSize: null,
    maxDesiredPackSize: null,
    minAllowedAllergenPercent: null,
    maxAllowedAllergenPercent: null,
    minStdMfgFeesPerUnit: null,
    maxStdMfgFeesPerUnit: null,
    minConversionFactor: null,
    maxConversionFactor: null,
    createdFrom: '',
    createdTo: '',
    updatedFrom: '',
    updatedTo: '',
    sortBy: 'itemName',
    sortDescending: false,
    pageNumber: 1,
    pageSize: 20,
    currentBuyer: '',
    mainProdCentre: '',
    freightOn: '',
  };
};

export const buildItemMasterFilter = (params: any): ItemMasterFilter => {
  return {
    search: params.search || undefined,
    itemCode: params.itemCode || undefined,
    itemName: params.itemName || undefined,
    shortName: params.shortName || undefined,
    revNo: params.revNo || undefined,
    itemTypeId: params.itemTypeId || undefined,
    subType: params.subType || undefined,
    gsInd: params.gsInd || undefined,
    goodsType: params.goodsType || undefined,
    pharmacopoeiaName: params.pharmacopoeiaName || undefined,
    unitOfMeasure: params.unitOfMeasure || undefined,
    issuingUnit: params.issuingUnit || undefined,
    drawingRef: params.drawingRef || undefined,
    stdAssayStrength: params.stdAssayStrength || undefined,
    productType: params.productType || undefined,
    salesDivision: params.salesDivision || undefined,
    productGroup: params.productGroup || undefined,
    vendorPartNo: params.vendorPartNo || undefined,
    allergen: params.allergen || undefined,
    activeIngredient: params.activeIngredient || undefined,
    packingFreightInsuranceServices: params.packingFreightInsuranceServices || undefined,
    boughtOut: params.boughtOut || undefined,
    jobWork: params.jobWork || undefined,
    imported: params.imported || undefined,
    taxCreditApplicable: params.taxCreditApplicable || undefined,
    manufactured: params.manufactured || undefined,
    sold: params.sold || undefined,
    keyProduct: params.keyProduct || undefined,
    exported: params.exported || undefined,
    batchNotApplicable: params.batchNotApplicable || undefined,
    qcRequired: params.qcRequired || undefined,
    mfgDateApplicable: params.mfgDateApplicable || undefined,
    expiryDateApplicable: params.expiryDateApplicable || undefined,
    trackSerialNos: params.trackSerialNos || undefined,
    mfgLocNameRequired: params.mfgLocNameRequired || undefined,
    mfgMmYyyyApplicable: params.mfgMmYyyyApplicable || undefined,
    expiryMmYyyyApplicable: params.expiryMmYyyyApplicable || undefined,
    principalForStatutoryReporting: params.principalForStatutoryReporting || undefined,
    minUomIssConvFactor: params.minUomIssConvFactor || undefined,
    maxUomIssConvFactor: params.maxUomIssConvFactor || undefined,
    minUomUqcConvFactor: params.minUomUqcConvFactor || undefined,
    maxUomUqcConvFactor: params.maxUomUqcConvFactor || undefined,
    minShelfLifeMonths: params.minShelfLifeMonths || undefined,
    maxShelfLifeMonths: params.maxShelfLifeMonths || undefined,
    minShelfLifeDays: params.minShelfLifeDays || undefined,
    maxShelfLifeDays: params.maxShelfLifeDays || undefined,
    minStdRate: params.minStdRate || undefined,
    maxStdRate: params.maxStdRate || undefined,
    minLeadTimeDays: params.minLeadTimeDays || undefined,
    maxLeadTimeDays: params.maxLeadTimeDays || undefined,
    minStdLossOnDry: params.minStdLossOnDry || undefined,
    maxStdLossOnDry: params.maxStdLossOnDry || undefined,
    minSafetyStock: params.minSafetyStock || undefined,
    maxSafetyStock: params.maxSafetyStock || undefined,
    minEconomicOrderQty: params.minEconomicOrderQty || undefined,
    maxEconomicOrderQty: params.maxEconomicOrderQty || undefined,
    minDesiredPackSize: params.minDesiredPackSize || undefined,
    maxDesiredPackSize: params.maxDesiredPackSize || undefined,
    minAllowedAllergenPercent: params.minAllowedAllergenPercent || undefined,
    maxAllowedAllergenPercent: params.maxAllowedAllergenPercent || undefined,
    minStdMfgFeesPerUnit: params.minStdMfgFeesPerUnit || undefined,
    maxStdMfgFeesPerUnit: params.maxStdMfgFeesPerUnit || undefined,
    minConversionFactor: params.minConversionFactor || undefined,
    maxConversionFactor: params.maxConversionFactor || undefined,
    createdFrom: params.createdFrom || undefined,
    createdTo: params.createdTo || undefined,
    updatedFrom: params.updatedFrom || undefined,
    updatedTo: params.updatedTo || undefined,
    sortBy: params.sortBy || 'itemName',
    sortDescending: params.sortDescending || false,
    pageNumber: params.pageNumber || 1,
    pageSize: params.pageSize || 20,
    currentBuyer: params.currentBuyer || undefined,
    mainProdCentre: params.mainProdCentre || undefined,
    freightOn: params.freightOn || undefined,
  };
}; 