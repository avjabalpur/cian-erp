import { parseAsString, parseAsInteger, parseAsBoolean, parseAsFloat } from 'nuqs/server';
import { ItemMasterFilter } from '@/types/item-master';
import { ItemMasterFormData } from "@/validations/item-master";

export interface SelectOption {
  value: string;
  label: string;
  variant?: "default" | "secondary" | "destructive" | "outline";
  disabled?: boolean;
  shortName?: string;
}

// Status Options
export const statusOptions: SelectOption[] = [
  { label: "All Statuses", value: "" },
  { label: "Active", value: "true" },
  { label: "Inactive", value: "false" },
];

// Sort Options
export const sortOptions: SelectOption[] = [
  { value: "created_at", label: "Created Date" },
  { value: "updated_at", label: "Updated Date" },
  { value: "code", label: "Code" },
  { value: "name", label: "Name" },
  { value: "description", label: "Description" },
];

// Sort Order Options
export const sortOrderOptions: SelectOption[] = [
  { value: "desc", label: "Descending" },
  { value: "asc", label: "Ascending" }
];

// Page Size Options
export const pageSizeOptions: SelectOption[] = [
  { label: "10 per page", value: "10" },
  { label: "25 per page", value: "25" },
  { label: "50 per page", value: "50" },
  { label: "100 per page", value: "100" },
];

// nuqs Parsers
export const itemTypeParsers = {
  page: parseAsInteger.withDefault(1),
  pageSize: parseAsInteger.withDefault(10),
  sortBy: parseAsString.withDefault("created_at"),
  sortOrder: parseAsString.withDefault("desc") as any,
  search: parseAsString.withDefault(""),
  isActive: parseAsBoolean,
};

// Filter Default Values
export const defaultItemTypeFilter = {
  page: 1,
  pageSize: 10,
  sortBy: "created_at",
  sortOrder: "desc" as "asc" | "desc",
  search: "",
  isActive: undefined as boolean | undefined,
};

export const itemMasterFilterParsers = {
  search: parseAsString.withDefault(''),
  itemCode: parseAsString.withDefault(''),
  itemName: parseAsString.withDefault(''),
  shortName: parseAsString.withDefault(''),
  revNo: parseAsString.withDefault(''),
  itemTypeId: parseAsInteger.withDefault(0),
  subType: parseAsString.withDefault(''),
  gsInd: parseAsString.withDefault(''),
  goodsType: parseAsBoolean.withDefault(false),
  pharmacopoeiaName: parseAsString.withDefault(''),
  unitOfMeasure: parseAsString.withDefault(''),
  issuingUnit: parseAsString.withDefault(''),
  drawingRef: parseAsString.withDefault(''),
  stdAssayStrength: parseAsString.withDefault(''),
  productType: parseAsString.withDefault(''),
  salesDivision: parseAsString.withDefault(''),
  productGroup: parseAsString.withDefault(''),
  vendorPartNo: parseAsString.withDefault(''),
  allergen: parseAsString.withDefault(''),
  activeIngredient: parseAsString.withDefault(''),
  packingFreightInsuranceServices: parseAsString.withDefault(''),
  boughtOut: parseAsBoolean.withDefault(false),
  jobWork: parseAsBoolean.withDefault(false),
  imported: parseAsBoolean.withDefault(false),
  taxCreditApplicable: parseAsBoolean.withDefault(false),
  manufactured: parseAsBoolean.withDefault(false),
  sold: parseAsBoolean.withDefault(false),
  keyProduct: parseAsBoolean.withDefault(false),
  exported: parseAsBoolean.withDefault(false),
  batchNotApplicable: parseAsBoolean.withDefault(false),
  qcRequired: parseAsBoolean.withDefault(false),
  mfgDateApplicable: parseAsBoolean.withDefault(false),
  expiryDateApplicable: parseAsBoolean.withDefault(false),
  trackSerialNos: parseAsBoolean.withDefault(false),
  mfgLocNameRequired: parseAsBoolean.withDefault(false),
  mfgMmYyyyApplicable: parseAsBoolean.withDefault(false),
  expiryMmYyyyApplicable: parseAsBoolean.withDefault(false),
  principalForStatutoryReporting: parseAsBoolean.withDefault(false),
  minUomIssConvFactor: parseAsFloat.withDefault(0),
  maxUomIssConvFactor: parseAsFloat.withDefault(0),
  minUomUqcConvFactor: parseAsFloat.withDefault(0),
  maxUomUqcConvFactor: parseAsFloat.withDefault(0),
  minShelfLifeMonths: parseAsInteger.withDefault(0),
  maxShelfLifeMonths: parseAsInteger.withDefault(0),
  minShelfLifeDays: parseAsInteger.withDefault(0),
  maxShelfLifeDays: parseAsInteger.withDefault(0),
  minStdRate: parseAsFloat.withDefault(0),
  maxStdRate: parseAsFloat.withDefault(0),
  minLeadTimeDays: parseAsInteger.withDefault(0),
  maxLeadTimeDays: parseAsInteger.withDefault(0),
  minStdLossOnDry: parseAsFloat.withDefault(0),
  maxStdLossOnDry: parseAsFloat.withDefault(0),
  minSafetyStock: parseAsFloat.withDefault(0),
  maxSafetyStock: parseAsFloat.withDefault(0),
  minEconomicOrderQty: parseAsFloat.withDefault(0),
  maxEconomicOrderQty: parseAsFloat.withDefault(0),
  minDesiredPackSize: parseAsFloat.withDefault(0),
  maxDesiredPackSize: parseAsFloat.withDefault(0),
  minAllowedAllergenPercent: parseAsFloat.withDefault(0),
  maxAllowedAllergenPercent: parseAsFloat.withDefault(0),
  minStdMfgFeesPerUnit: parseAsFloat.withDefault(0),
  maxStdMfgFeesPerUnit: parseAsFloat.withDefault(0),
  minConversionFactor: parseAsFloat.withDefault(0),
  maxConversionFactor: parseAsFloat.withDefault(0),
  createdFrom: parseAsString.withDefault(''),
  createdTo: parseAsString.withDefault(''),
  updatedFrom: parseAsString.withDefault(''),
  updatedTo: parseAsString.withDefault(''),
  sortBy: parseAsString.withDefault('itemName'),
  sortDescending: parseAsBoolean.withDefault(false),
  pageNumber: parseAsInteger.withDefault(1),
  pageSize: parseAsInteger.withDefault(20),
  currentBuyer: parseAsString.withDefault(''),
  mainProdCentre: parseAsString.withDefault(''),
  freightOn: parseAsString.withDefault(''),
};

export const getItemMasterDefaultValues = (): ItemMasterFormData => ({
  itemCode: "",
  revNo: "",
  itemTypeId: 0,
  subType: "",
  gsInd: "",
  goodsType: false,
  itemName: "",
  shortName: "",
  pharmacopoeiaName: "",
  unitOfMeasure: "",
  issuingUnit: "",
  uomIssConvFactor: undefined,
  uomUqcConvFactor: undefined,
  drawingRef: "",
  leadTimeDays: undefined,
  currentBuyer: "",
  economicOrderQty: undefined,
  desiredPackSize: undefined,
  freightOn: "",
  stdAssayStrength: "",
  shelfLifeMonths: undefined,
  shelfLifeDays: undefined,
  stdRate: undefined,
  stdLossOnDry: undefined,
  safetyStock: undefined,
  allowedAllergenPercent: undefined,
  stdMfgFeesPerUnit: undefined,
  mainProdCentre: "",
  sold: false,
  keyProduct: false,
  exported: false,
  productType: "",
  salesDivision: "",
  productGroup: "",
  conversionFactor: undefined,
  vendorPartNo: "",
  boughtOut: false,
  jobWork: false,
  imported: false,
  taxCreditApplicable: false,
  manufactured: false,
  batchNotApplicable: false,
  qcRequired: false,
  allergen: "",
  mfgDateApplicable: false,
  expiryDateApplicable: false,
  trackSerialNos: false,
  packingFreightInsuranceServices: "",
  activeIngredient: "",
  mfgLocNameRequired: false,
  mfgMmYyyyApplicable: false,
  expiryMmYyyyApplicable: false,
  principalForStatutoryReporting: false,
  purchaseBasedOn: "",
  excessPlanningPercent: undefined,
  reorderLevel: undefined,
  minStockLevel: undefined,
  maxStockLevel: undefined,
  minBalanceShelfLifeDays: undefined,
  customDutyPercent: undefined,
  igstPercent: undefined,
  swsPercent: undefined,
  maxPurchaseRate: undefined,
  stopProcurement: false,
  abcConsumptionValue: "",
  xyzStockValue: "",
  fsnMovement: "",
  vedAnalysis: "",
  itemDescriptionForExports: "",
  exportProductGroupCode: "",
  exportProductGroupName: "",
  depbRateListSrlNo: "",
  depbRate: undefined,
  depbValueCap: undefined,
  depbRemarks: "",
  dutyDrawbackSrlNo: "",
  dutyDrawbackRateType: "",
  dutyDrawbackRatePercent: undefined,
  dutyDrawbackRateFixed: undefined,
  dutyDrawbackValueCap: undefined,
  dutyDrawbackRemarks: "",
  itemSpecification: "",
  substituteItemFor: "",
  customTariffNo: "",
  exciseTariffNo: "",
  vatCommCode: "",
  convFactor: undefined,
  oldCode: "",
  standardWeight: undefined,
  standardConversionCostFactor: undefined,
  standardPackingCostFactor: undefined,
  costFactorPercent: undefined,
  packingCostRs: undefined,
  packShort: "",
  productCast: "",
  pvcColor: "",
  color: "",
  flavour: "",
  fragrance: "",
  form: "",
  packagingStyle: "",
  changePart: "",
  size: "",
  withLeaflet: false,
  withApplicator: false,
  withWad: false,
  withSilica: false,
  withCotton: false,
  withMeasuringCap: false,
  withSpoon: false,
  packingNp: "",
  packingNpQty: undefined,
  packingStylePtd: "",
  packingStylePtdQty: undefined,
  notePerStrip: "",
  packShortPtdSpec: "",
  packShortPtdSize: "",
  packShortPtdQty: undefined,
  packingStyleNpSize: "",
  packingStyleNpQty: undefined,
  noteForCtn: "",
  outerSize: "",
  outerQty: undefined,
  shrink: "",
  shrinkPacking: "",
  shipperSize: "",
  qtyPerShipper: undefined,
  shipperNote: "",
});

export const mapItemToFormData = (item: any): ItemMasterFormData => {
  if (!item) return getItemMasterDefaultValues();

  return {
    itemCode: item.itemCode || "",
    revNo: item.revNo || "",
    itemTypeId: item.itemTypeId || 0,
    subType: item.subType || "",
    gsInd: item.gsInd || "",
    goodsType: item.goodsType || false,
    itemName: item.itemName || "",
    shortName: item.shortName || "",
    pharmacopoeiaName: item.pharmacopoeiaName || "",
    unitOfMeasure: item.unitOfMeasure || "",
    issuingUnit: item.issuingUnit || "",
    uomIssConvFactor: item.uomIssConvFactor,
    uomUqcConvFactor: item.uomUqcConvFactor,
    drawingRef: item.drawingRef || "",
    leadTimeDays: item.leadTimeDays,
    currentBuyer: item.currentBuyer || "",
    economicOrderQty: item.economicOrderQty,
    desiredPackSize: item.desiredPackSize,
    freightOn: item.freightOn || "",
    stdAssayStrength: item.stdAssayStrength || "",
    shelfLifeMonths: item.shelfLifeMonths,
    shelfLifeDays: item.shelfLifeDays,
    stdRate: item.stdRate,
    stdLossOnDry: item.stdLossOnDry,
    safetyStock: item.safetyStock,
    allowedAllergenPercent: item.allowedAllergenPercent,
    stdMfgFeesPerUnit: item.stdMfgFeesPerUnit,
    mainProdCentre: item.mainProdCentre || "",
    sold: item.sold || false,
    keyProduct: item.keyProduct || false,
    exported: item.exported || false,
    productType: item.productType || "",
    salesDivision: item.salesDivision || "",
    productGroup: item.productGroup || "",
    conversionFactor: item.conversionFactor,
    vendorPartNo: item.vendorPartNo || "",
    boughtOut: item.boughtOut || false,
    jobWork: item.jobWork || false,
    imported: item.imported || false,
    taxCreditApplicable: item.taxCreditApplicable || false,
    manufactured: item.manufactured || false,
    batchNotApplicable: item.batchNotApplicable || false,
    qcRequired: item.qcRequired || false,
    allergen: item.allergen || "",
    mfgDateApplicable: item.mfgDateApplicable || false,
    expiryDateApplicable: item.expiryDateApplicable || false,
    trackSerialNos: item.trackSerialNos || false,
    packingFreightInsuranceServices: item.packingFreightInsuranceServices || "",
    activeIngredient: item.activeIngredient || "",
    mfgLocNameRequired: item.mfgLocNameRequired || false,
    mfgMmYyyyApplicable: item.mfgMmYyyyApplicable || false,
    expiryMmYyyyApplicable: item.expiryMmYyyyApplicable || false,
    principalForStatutoryReporting: item.principalForStatutoryReporting || false,
    // Map nested objects
    ...item.specification && {
      itemSpecification: item.specification.specification || "",
      substituteItemFor: item.specification.substituteItemFor || "",
      customTariffNo: item.specification.customTariffNo || "",
      exciseTariffNo: item.specification.exciseTariffNo || "",
      vatCommCode: item.specification.vatCommCode || "",
      convFactor: item.specification.convFactor,
      oldCode: item.specification.oldCode || "",
      standardWeight: item.specification.standardWeight,
      standardConversionCostFactor: item.specification.standardConversionCostFactor,
      standardPackingCostFactor: item.specification.standardPackingCostFactor,
      costFactorPercent: item.specification.costFactorPercent,
      packingCostRs: item.specification.packingCostRs,
    },
    ...item.boughtOutDetails && {
      purchaseBasedOn: item.boughtOutDetails.purchaseBasedOn || "",
      excessPlanningPercent: item.boughtOutDetails.excessPlanningPercent,
      reorderLevel: item.boughtOutDetails.reorderLevel,
      minStockLevel: item.boughtOutDetails.minStockLevel,
      maxStockLevel: item.boughtOutDetails.maxStockLevel,
      minBalanceShelfLifeDays: item.boughtOutDetails.minBalanceShelfLifeDays,
      customDutyPercent: item.boughtOutDetails.customDutyPercent,
      igstPercent: item.boughtOutDetails.igstPercent,
      swsPercent: item.boughtOutDetails.swsPercent,
      maxPurchaseRate: item.boughtOutDetails.maxPurchaseRate,
      stopProcurement: item.boughtOutDetails.stopProcurement || false,
    },
    ...item.stockAnalysis && {
      abcConsumptionValue: item.stockAnalysis.abcConsumptionValue || "",
      xyzStockValue: item.stockAnalysis.xyzStockValue || "",
      fsnMovement: item.stockAnalysis.fsnMovement || "",
      vedAnalysis: item.stockAnalysis.vedAnalysis || "",
    },
    // Add other mappings as needed
  };
};

export const transformFormDataToApi = (data: ItemMasterFormData) => {
  return {
    ...data,
    // Transform nested objects for API
    specification: {
      specification: data.itemSpecification,
      substituteItemFor: data.substituteItemFor,
      customTariffNo: data.customTariffNo,
      exciseTariffNo: data.exciseTariffNo,
      vatCommCode: data.vatCommCode,
      convFactor: data.convFactor,
      oldCode: data.oldCode,
      standardWeight: data.standardWeight,
      standardConversionCostFactor: data.standardConversionCostFactor,
      standardPackingCostFactor: data.standardPackingCostFactor,
      costFactorPercent: data.costFactorPercent,
      packingCostRs: data.packingCostRs,
    },
    boughtOutDetails: {
      purchaseBasedOn: data.purchaseBasedOn,
      excessPlanningPercent: data.excessPlanningPercent,
      reorderLevel: data.reorderLevel,
      minStockLevel: data.minStockLevel,
      maxStockLevel: data.maxStockLevel,
      minBalanceShelfLifeDays: data.minBalanceShelfLifeDays,
      customDutyPercent: data.customDutyPercent,
      igstPercent: data.igstPercent,
      swsPercent: data.swsPercent,
      maxPurchaseRate: data.maxPurchaseRate,
      stopProcurement: data.stopProcurement,
    },
    stockAnalysis: {
      abcConsumptionValue: data.abcConsumptionValue,
      xyzStockValue: data.xyzStockValue,
      fsnMovement: data.fsnMovement,
      vedAnalysis: data.vedAnalysis,
    },
    // Add other transformations as needed
  };
};

export const clearItemMasterFilters = () => {
  return {
    search: '',
    itemCode: '',
    itemName: '',
    shortName: '',
    revNo: '',
    itemTypeId: null,
    subType: '',
    gsInd: '',
    goodsType: '',
    pharmacopoeiaName: '',
    unitOfMeasure: '',
    issuingUnit: '',
    drawingRef: '',
    stdAssayStrength: '',
    productType: '',
    salesDivision: '',
    productGroup: '',
    vendorPartNo: '',
    allergen: '',
    activeIngredient: '',
    packingFreightInsuranceServices: '',
    boughtOut: null,
    jobWork: null,
    imported: null,
    taxCreditApplicable: null,
    manufactured: null,
    sold: null,
    keyProduct: null,
    exported: null,
    batchNotApplicable: null,
    qcRequired: null,
    mfgDateApplicable: null,
    expiryDateApplicable: null,
    trackSerialNos: null,
    mfgLocNameRequired: null,
    mfgMmYyyyApplicable: null,
    expiryMmYyyyApplicable: null,
    principalForStatutoryReporting: null,
    minUomIssConvFactor: null,
    maxUomIssConvFactor: null,
    minUomUqcConvFactor: null,
    maxUomUqcConvFactor: null,
    minShelfLifeMonths: null,
    maxShelfLifeMonths: null,
    minShelfLifeDays: null,
    maxShelfLifeDays: null,
    minStdRate: null,
    maxStdRate: null,
    minLeadTimeDays: null,
    maxLeadTimeDays: null,
    minStdLossOnDry: null,
    maxStdLossOnDry: null,
    minSafetyStock: null,
    maxSafetyStock: null,
    minEconomicOrderQty: null,
    maxEconomicOrderQty: null,
    minDesiredPackSize: null,
    maxDesiredPackSize: null,
    minAllowedAllergenPercent: null,
    maxAllowedAllergenPercent: null,
    minStdMfgFeesPerUnit: null,
    maxStdMfgFeesPerUnit: null,
    minConversionFactor: null,
    maxConversionFactor: null,
    createdFrom: '',
    createdTo: '',
    updatedFrom: '',
    updatedTo: '',
    sortBy: 'itemName',
    sortDescending: false,
    pageNumber: 1,
    pageSize: 20,
    currentBuyer: '',
    mainProdCentre: '',
    freightOn: '',
  };
};

export const buildItemMasterFilter = (params: any): ItemMasterFilter => {
  return {
    search: params.search || undefined,
    itemCode: params.itemCode || undefined,
    itemName: params.itemName || undefined,
    shortName: params.shortName || undefined,
    revNo: params.revNo || undefined,
    itemTypeId: params.itemTypeId || undefined,
    subType: params.subType || undefined,
    gsInd: params.gsInd || undefined,
    goodsType: params.goodsType || undefined,
    pharmacopoeiaName: params.pharmacopoeiaName || undefined,
    unitOfMeasure: params.unitOfMeasure || undefined,
    issuingUnit: params.issuingUnit || undefined,
    drawingRef: params.drawingRef || undefined,
    stdAssayStrength: params.stdAssayStrength || undefined,
    productType: params.productType || undefined,
    salesDivision: params.salesDivision || undefined,
    productGroup: params.productGroup || undefined,
    vendorPartNo: params.vendorPartNo || undefined,
    allergen: params.allergen || undefined,
    activeIngredient: params.activeIngredient || undefined,
    packingFreightInsuranceServices: params.packingFreightInsuranceServices || undefined,
    boughtOut: params.boughtOut || undefined,
    jobWork: params.jobWork || undefined,
    imported: params.imported || undefined,
    taxCreditApplicable: params.taxCreditApplicable || undefined,
    manufactured: params.manufactured || undefined,
    sold: params.sold || undefined,
    keyProduct: params.keyProduct || undefined,
    exported: params.exported || undefined,
    batchNotApplicable: params.batchNotApplicable || undefined,
    qcRequired: params.qcRequired || undefined,
    mfgDateApplicable: params.mfgDateApplicable || undefined,
    expiryDateApplicable: params.expiryDateApplicable || undefined,
    trackSerialNos: params.trackSerialNos || undefined,
    mfgLocNameRequired: params.mfgLocNameRequired || undefined,
    mfgMmYyyyApplicable: params.mfgMmYyyyApplicable || undefined,
    expiryMmYyyyApplicable: params.expiryMmYyyyApplicable || undefined,
    principalForStatutoryReporting: params.principalForStatutoryReporting || undefined,
    minUomIssConvFactor: params.minUomIssConvFactor || undefined,
    maxUomIssConvFactor: params.maxUomIssConvFactor || undefined,
    minUomUqcConvFactor: params.minUomUqcConvFactor || undefined,
    maxUomUqcConvFactor: params.maxUomUqcConvFactor || undefined,
    minShelfLifeMonths: params.minShelfLifeMonths || undefined,
    maxShelfLifeMonths: params.maxShelfLifeMonths || undefined,
    minShelfLifeDays: params.minShelfLifeDays || undefined,
    maxShelfLifeDays: params.maxShelfLifeDays || undefined,
    minStdRate: params.minStdRate || undefined,
    maxStdRate: params.maxStdRate || undefined,
    minLeadTimeDays: params.minLeadTimeDays || undefined,
    maxLeadTimeDays: params.maxLeadTimeDays || undefined,
    minStdLossOnDry: params.minStdLossOnDry || undefined,
    maxStdLossOnDry: params.maxStdLossOnDry || undefined,
    minSafetyStock: params.minSafetyStock || undefined,
    maxSafetyStock: params.maxSafetyStock || undefined,
    minEconomicOrderQty: params.minEconomicOrderQty || undefined,
    maxEconomicOrderQty: params.maxEconomicOrderQty || undefined,
    minDesiredPackSize: params.minDesiredPackSize || undefined,
    maxDesiredPackSize: params.maxDesiredPackSize || undefined,
    minAllowedAllergenPercent: params.minAllowedAllergenPercent || undefined,
    maxAllowedAllergenPercent: params.maxAllowedAllergenPercent || undefined,
    minStdMfgFeesPerUnit: params.minStdMfgFeesPerUnit || undefined,
    maxStdMfgFeesPerUnit: params.maxStdMfgFeesPerUnit || undefined,
    minConversionFactor: params.minConversionFactor || undefined,
    maxConversionFactor: params.maxConversionFactor || undefined,
    createdFrom: params.createdFrom || undefined,
    createdTo: params.createdTo || undefined,
    updatedFrom: params.updatedFrom || undefined,
    updatedTo: params.updatedTo || undefined,
    sortBy: params.sortBy || 'itemName',
    sortDescending: params.sortDescending || false,
    pageNumber: params.pageNumber || 1,
    pageSize: params.pageSize || 20,
    currentBuyer: params.currentBuyer || undefined,
    mainProdCentre: params.mainProdCentre || undefined,
    freightOn: params.freightOn || undefined,
  };
}; 