import { 
  Customer, 
  CreateCustomerData, 
  UpdateCustomerData,
  CustomerMasterFormData,
  CustomerAddress,
  CustomerBankingDetail,
  CustomerBusinessTerm,
  CustomerTaxCompliance
} from "@/types/customer-master";

export const getCustomerMasterDefaultValues = (): CustomerMasterFormData => ({
  locationCode: "",
  customerNumber: "",
  customerCode: "",
  customerName: "",
  shortName: "",
  payeeName: "",
  customerTypeCode: "",
  segmentCode: "",
  incomeTaxPanNumber: "",
  customerSaleType: "",
  exportType: "",
  gstin: "",
  drugLicenseNumber: "",
  drugLicenseExpiryDate: "",
  otherLicenseNumber: "",
  oldCode: "",
  customerLotNumber: "",
  stopInvoice: false,
  isExportCustomer: false,
  isRegisteredDealer: false,
  isRecordClosed: false,
  isActive: true,
  continent: "",
  rebates: "",
  externalInformation: "",
  addresses: [],
  bankingDetails: [],
  businessTerms: {
    destinationCode: "",
    transportModeCode: "",
    transporterCode: "",
    leadDays: "",
    customerDistance: "",
    freightIndicator: "",
    supplyStockLocation: "",
    allowConsignmentOnBooking: false,
    customerAccountCode: "",
    creditLimit: "",
    minimumInvoiceAmount: "",
    customerSchemeCode: "",
    customerBrokerCode: "",
    customerBrokerRate: "",
    cashDiscountPercentage: "",
    miscChargePercentage: "",
    miscDiscountPercentage: "",
    paymentTermCode: "",
    creditPeriodDays: "",
    newPartyCreditPeriodDays: "",
    isOverdueCheck: true,
    numberOfBills: "",
    outstandingBillPeriodDays: "",
    outstandingBillAccountIndicator: "",
  },
  taxCompliance: {
    vatFormCode: "",
    centralFormCode: "",
    isEligibleForTcs: false,
    tcsType: "",
    isApplicableHigherRate: false,
    isDeemedNonResident: false,
    isDeemedPermanentEstablishment: false,
    isBillDiscount: false,
    isReverseEndOfYear: false,
    customerInterfaceCode: "",
    interfaceFileFormat: "",
    projectionRatio: "",
    numberOfDisplays: "",
    labelLayout: "",
    numberOfCopies: "",
    specialTerms: "",
    documentsThrough: "",
  },
});

export const mapCustomerToFormData = (customer: Customer): CustomerMasterFormData => {
  return {
    locationCode: customer.locationCode || "",
    customerNumber: customer.customerNumber,
    customerCode: customer.customerCode,
    customerName: customer.customerName,
    shortName: customer.shortName || "",
    payeeName: customer.payeeName || "",
    customerTypeCode: customer.customerTypeCode || "",
    segmentCode: customer.segmentCode || "",
    incomeTaxPanNumber: customer.incomeTaxPanNumber || "",
    customerSaleType: customer.customerSaleType || "",
    exportType: customer.exportType || "",
    gstin: customer.gstin || "",
    drugLicenseNumber: customer.drugLicenseNumber || "",
    drugLicenseExpiryDate: customer.drugLicenseExpiryDate || "",
    otherLicenseNumber: customer.otherLicenseNumber || "",
    oldCode: customer.oldCode || "",
    customerLotNumber: customer.customerLotNumber || "",
    stopInvoice: customer.stopInvoice,
    isExportCustomer: customer.isExportCustomer,
    isRegisteredDealer: customer.isRegisteredDealer,
    isRecordClosed: customer.isRecordClosed,
    isActive: customer.isActive,
    continent: customer.continent || "",
    rebates: customer.rebates || "",
    externalInformation: customer.externalInformation || "",
    addresses: customer.addresses?.map(address => ({
      addressLine1: address.addressLine1 || "",
      addressLine2: address.addressLine2 || "",
      addressLine3: address.addressLine3 || "",
      city: address.city || "",
      zipCode: address.zipCode || "",
      country: address.country || "",
      stateCode: address.stateCode || "",
      gstStateCode: address.gstStateCode || "",
      contactPerson: address.contactPerson || "",
      telephoneNumber: address.telephoneNumber || "",
      mobileNumber: address.mobileNumber || "",
      faxNumber: address.faxNumber || "",
      emailId: address.emailId || "",
      website: address.website || "",
      isPrimary: address.isPrimary,
    })) || [],
    bankingDetails: customer.bankingDetails?.map(banking => ({
      bankIfscCode: banking.bankIfscCode || "",
      bankAccountNumber: banking.bankAccountNumber || "",
      bankName: banking.bankName || "",
      customerBanker: banking.customerBanker || "",
      customerVpa: banking.customerVpa || "",
      bankAccountTypeCode: banking.bankAccountTypeCode || "",
      bankBranch: banking.bankBranch || "",
      bankLocation: banking.bankLocation || "",
      isPrimary: banking.isPrimary,
    })) || [],
    businessTerms: customer.businessTerms?.[0] ? {
      destinationCode: customer.businessTerms[0].destinationCode || "",
      transportModeCode: customer.businessTerms[0].transportModeCode || "",
      transporterCode: customer.businessTerms[0].transporterCode || "",
      leadDays: customer.businessTerms[0].leadDays?.toString() || "",
      customerDistance: customer.businessTerms[0].customerDistance?.toString() || "",
      freightIndicator: customer.businessTerms[0].freightIndicator || "",
      supplyStockLocation: customer.businessTerms[0].supplyStockLocation || "",
      allowConsignmentOnBooking: customer.businessTerms[0].allowConsignmentOnBooking,
      customerAccountCode: customer.businessTerms[0].customerAccountCode || "",
      creditLimit: customer.businessTerms[0].creditLimit?.toString() || "",
      minimumInvoiceAmount: customer.businessTerms[0].minimumInvoiceAmount?.toString() || "",
      customerSchemeCode: customer.businessTerms[0].customerSchemeCode || "",
      customerBrokerCode: customer.businessTerms[0].customerBrokerCode || "",
      customerBrokerRate: customer.businessTerms[0].customerBrokerRate?.toString() || "",
      cashDiscountPercentage: customer.businessTerms[0].cashDiscountPercentage?.toString() || "",
      miscChargePercentage: customer.businessTerms[0].miscChargePercentage?.toString() || "",
      miscDiscountPercentage: customer.businessTerms[0].miscDiscountPercentage?.toString() || "",
      paymentTermCode: customer.businessTerms[0].paymentTermCode || "",
      creditPeriodDays: customer.businessTerms[0].creditPeriodDays?.toString() || "",
      newPartyCreditPeriodDays: customer.businessTerms[0].newPartyCreditPeriodDays?.toString() || "",
      isOverdueCheck: customer.businessTerms[0].isOverdueCheck,
      numberOfBills: customer.businessTerms[0].numberOfBills?.toString() || "",
      outstandingBillPeriodDays: customer.businessTerms[0].outstandingBillPeriodDays?.toString() || "",
      outstandingBillAccountIndicator: customer.businessTerms[0].outstandingBillAccountIndicator || "",
    } : undefined,
    taxCompliance: customer.taxCompliance ? {
      vatFormCode: customer.taxCompliance.vatFormCode || "",
      centralFormCode: customer.taxCompliance.centralFormCode || "",
      isEligibleForTcs: customer.taxCompliance.isEligibleForTcs,
      tcsType: customer.taxCompliance.tcsType || "",
      isApplicableHigherRate: customer.taxCompliance.isApplicableHigherRate,
      isDeemedNonResident: customer.taxCompliance.isDeemedNonResident,
      isDeemedPermanentEstablishment: customer.taxCompliance.isDeemedPermanentEstablishment,
      isBillDiscount: customer.taxCompliance.isBillDiscount,
      isReverseEndOfYear: customer.taxCompliance.isReverseEndOfYear,
      customerInterfaceCode: customer.taxCompliance.customerInterfaceCode?.toString() || "",
      interfaceFileFormat: customer.taxCompliance.interfaceFileFormat || "",
      projectionRatio: customer.taxCompliance.projectionRatio?.toString() || "",
      numberOfDisplays: customer.taxCompliance.numberOfDisplays?.toString() || "",
      labelLayout: customer.taxCompliance.labelLayout || "",
      numberOfCopies: customer.taxCompliance.numberOfCopies?.toString() || "",
      specialTerms: customer.taxCompliance.specialTerms || "",
      documentsThrough: customer.taxCompliance.documentsThrough || "",
    } : undefined,
  };
};

export const transformFormDataToApi = (formData: CustomerMasterFormData): CreateCustomerData => {
  return {
    locationCode: formData.locationCode || undefined,
    customerNumber: formData.customerNumber,
    customerCode: formData.customerCode,
    customerName: formData.customerName,
    shortName: formData.shortName || undefined,
    payeeName: formData.payeeName || undefined,
    customerTypeCode: formData.customerTypeCode || undefined,
    segmentCode: formData.segmentCode || undefined,
    incomeTaxPanNumber: formData.incomeTaxPanNumber || undefined,
    customerSaleType: formData.customerSaleType || undefined,
    exportType: formData.exportType || undefined,
    gstin: formData.gstin || undefined,
    drugLicenseNumber: formData.drugLicenseNumber || undefined,
    drugLicenseExpiryDate: formData.drugLicenseExpiryDate || undefined,
    otherLicenseNumber: formData.otherLicenseNumber || undefined,
    oldCode: formData.oldCode || undefined,
    customerLotNumber: formData.customerLotNumber || undefined,
    stopInvoice: formData.stopInvoice,
    isExportCustomer: formData.isExportCustomer,
    isRegisteredDealer: formData.isRegisteredDealer,
    isRecordClosed: formData.isRecordClosed,
    isActive: formData.isActive,
    continent: formData.continent || undefined,
    rebates: formData.rebates || undefined,
    externalInformation: formData.externalInformation || undefined,
    addresses: formData.addresses?.map(address => ({
      addressLine1: address.addressLine1 || undefined,
      addressLine2: address.addressLine2 || undefined,
      addressLine3: address.addressLine3 || undefined,
      city: address.city || undefined,
      zipCode: address.zipCode || undefined,
      country: address.country || undefined,
      stateCode: address.stateCode || undefined,
      gstStateCode: address.gstStateCode || undefined,
      contactPerson: address.contactPerson || undefined,
      telephoneNumber: address.telephoneNumber || undefined,
      mobileNumber: address.mobileNumber || undefined,
      faxNumber: address.faxNumber || undefined,
      emailId: address.emailId || undefined,
      website: address.website || undefined,
      isPrimary: address.isPrimary,
    })) || undefined,
    bankingDetails: formData.bankingDetails?.map(banking => ({
      bankIfscCode: banking.bankIfscCode || undefined,
      bankAccountNumber: banking.bankAccountNumber || undefined,
      bankName: banking.bankName || undefined,
      customerBanker: banking.customerBanker || undefined,
      customerVpa: banking.customerVpa || undefined,
      bankAccountTypeCode: banking.bankAccountTypeCode || undefined,
      bankBranch: banking.bankBranch || undefined,
      bankLocation: banking.bankLocation || undefined,
      isPrimary: banking.isPrimary,
    })) || undefined,
    businessTerms: formData.businessTerms ? {
      destinationCode: formData.businessTerms.destinationCode || undefined,
      transportModeCode: formData.businessTerms.transportModeCode || undefined,
      transporterCode: formData.businessTerms.transporterCode || undefined,
      leadDays: formData.businessTerms.leadDays || undefined,
      customerDistance: formData.businessTerms.customerDistance || undefined,
      freightIndicator: formData.businessTerms.freightIndicator || undefined,
      supplyStockLocation: formData.businessTerms.supplyStockLocation || undefined,
      allowConsignmentOnBooking: formData.businessTerms.allowConsignmentOnBooking,
      customerAccountCode: formData.businessTerms.customerAccountCode || undefined,
      creditLimit: formData.businessTerms.creditLimit || undefined,
      minimumInvoiceAmount: formData.businessTerms.minimumInvoiceAmount || undefined,
      customerSchemeCode: formData.businessTerms.customerSchemeCode || undefined,
      customerBrokerCode: formData.businessTerms.customerBrokerCode || undefined,
      customerBrokerRate: formData.businessTerms.customerBrokerRate || undefined,
      cashDiscountPercentage: formData.businessTerms.cashDiscountPercentage || undefined,
      miscChargePercentage: formData.businessTerms.miscChargePercentage || undefined,
      miscDiscountPercentage: formData.businessTerms.miscDiscountPercentage || undefined,
      paymentTermCode: formData.businessTerms.paymentTermCode || undefined,
      creditPeriodDays: formData.businessTerms.creditPeriodDays || undefined,
      newPartyCreditPeriodDays: formData.businessTerms.newPartyCreditPeriodDays || undefined,
      isOverdueCheck: formData.businessTerms.isOverdueCheck,
      numberOfBills: formData.businessTerms.numberOfBills || undefined,
      outstandingBillPeriodDays: formData.businessTerms.outstandingBillPeriodDays || undefined,
      outstandingBillAccountIndicator: formData.businessTerms.outstandingBillAccountIndicator || undefined,
    } : undefined,
    taxCompliance: formData.taxCompliance ? {
      vatFormCode: formData.taxCompliance.vatFormCode || undefined,
      centralFormCode: formData.taxCompliance.centralFormCode || undefined,
      isEligibleForTcs: formData.taxCompliance.isEligibleForTcs,
      tcsType: formData.taxCompliance.tcsType || undefined,
      isApplicableHigherRate: formData.taxCompliance.isApplicableHigherRate,
      isDeemedNonResident: formData.taxCompliance.isDeemedNonResident,
      isDeemedPermanentEstablishment: formData.taxCompliance.isDeemedPermanentEstablishment,
      isBillDiscount: formData.taxCompliance.isBillDiscount,
      isReverseEndOfYear: formData.taxCompliance.isReverseEndOfYear,
      customerInterfaceCode: formData.taxCompliance.customerInterfaceCode || undefined,
      interfaceFileFormat: formData.taxCompliance.interfaceFileFormat || undefined,
      projectionRatio: formData.taxCompliance.projectionRatio || undefined,
      numberOfDisplays: formData.taxCompliance.numberOfDisplays || undefined,
      labelLayout: formData.taxCompliance.labelLayout || undefined,
      numberOfCopies: formData.taxCompliance.numberOfCopies || undefined,
      specialTerms: formData.taxCompliance.specialTerms || undefined,
      documentsThrough: formData.taxCompliance.documentsThrough || undefined,
    } : undefined,
  };
}; 